// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk;
use gtk_layer_shell_sys;
use gtk_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib_wrapper! {
    pub struct Window(Object<gtk_layer_shell_sys::GtkWindow, gtk_layer_shell_sys::GtkWindowClass, WindowClass>);

    match fn {
        get_type => || gtk_layer_shell_sys::gtk_window_get_type(),
    }
}

impl Window {
    //pub fn new(type_: /*Ignored*/gtk::WindowType) -> gtk::Window {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_new() }
    //}

    //pub fn get_default_icon_list() -> /*Ignored*/Vec<gdk_pixbuf::Pixbuf> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_default_icon_list() }
    //}

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    pub fn get_default_icon_name() -> Option<GString> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(gtk_layer_shell_sys::gtk_window_get_default_icon_name())
        }
    }

    //pub fn list_toplevels() -> /*Ignored*/Vec<gtk::Widget> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_list_toplevels() }
    //}

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    pub fn set_auto_startup_notification(setting: bool) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_auto_startup_notification(setting.to_glib());
        }
    }

    //#[cfg(any(feature = "v2_4", feature = "dox"))]
    //pub fn set_default_icon(icon: /*Ignored*/&gdk_pixbuf::Pixbuf) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_default_icon() }
    //}

    //#[cfg(any(feature = "v2_2", feature = "dox"))]
    //pub fn set_default_icon_from_file<P: AsRef<std::path::Path>>(filename: P, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_default_icon_from_file() }
    //}

    //pub fn set_default_icon_list(list: /*Ignored*/&[gdk_pixbuf::Pixbuf]) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_default_icon_list() }
    //}

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    pub fn set_default_icon_name(name: &str) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_default_icon_name(name.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_14", feature = "dox"))]
    pub fn set_interactive_debugging(enable: bool) {
        assert_initialized_main_thread!();
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_interactive_debugging(enable.to_glib());
        }
    }
}

pub const NONE_WINDOW: Option<&Window> = None;

pub trait WindowExt: 'static {
    fn activate_default(&self) -> bool;

    fn activate_focus(&self) -> bool;

    //#[cfg(any(feature = "v2_4", feature = "dox"))]
    //fn activate_key(&self, event: /*Ignored*/&mut gdk::EventKey) -> bool;

    //fn add_accel_group(&self, accel_group: /*Ignored*/&gtk::AccelGroup);

    //fn add_mnemonic(&self, keyval: u32, target: /*Ignored*/&gtk::Widget);

    fn begin_move_drag(&self, button: i32, root_x: i32, root_y: i32, timestamp: u32);

    //fn begin_resize_drag(&self, edge: /*Ignored*/gdk::WindowEdge, button: i32, root_x: i32, root_y: i32, timestamp: u32);

    #[cfg(any(feature = "v3_10", feature = "dox"))]
    fn close(&self);

    fn deiconify(&self);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn fullscreen(&self);

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn fullscreen_on_monitor(&self, screen: /*Ignored*/&gdk::Screen, monitor: i32);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn get_accept_focus(&self) -> bool;

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_application(&self) -> /*Ignored*/Option<gtk::Application>;

    //#[cfg(any(feature = "v3_4", feature = "dox"))]
    //fn get_attached_to(&self) -> /*Ignored*/Option<gtk::Widget>;

    fn get_decorated(&self) -> bool;

    fn get_default_size(&self) -> (i32, i32);

    //#[cfg(any(feature = "v2_14", feature = "dox"))]
    //fn get_default_widget(&self) -> /*Ignored*/Option<gtk::Widget>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_deletable(&self) -> bool;

    fn get_destroy_with_parent(&self) -> bool;

    //fn get_focus(&self) -> /*Ignored*/Option<gtk::Widget>;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_focus_on_map(&self) -> bool;

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_focus_visible(&self) -> bool;

    //fn get_gravity(&self) -> /*Ignored*/gdk::Gravity;

    //#[cfg(any(feature = "v2_10", feature = "dox"))]
    //fn get_group(&self) -> /*Ignored*/Option<gtk::WindowGroup>;

    #[cfg_attr(feature = "v3_14", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_has_resize_grip(&self) -> bool;

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn get_hide_titlebar_when_maximized(&self) -> bool;

    //fn get_icon(&self) -> /*Ignored*/Option<gdk_pixbuf::Pixbuf>;

    //fn get_icon_list(&self) -> /*Ignored*/Vec<gdk_pixbuf::Pixbuf>;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_icon_name(&self) -> Option<GString>;

    //fn get_mnemonic_modifier(&self) -> /*Ignored*/gdk::ModifierType;

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn get_mnemonics_visible(&self) -> bool;

    fn get_modal(&self) -> bool;

    #[cfg_attr(feature = "v3_8", deprecated)]
    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_opacity(&self) -> f64;

    fn get_position(&self) -> (i32, i32);

    fn get_resizable(&self) -> bool;

    //#[cfg_attr(feature = "v3_14", deprecated)]
    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_resize_grip_area(&self, rect: /*Ignored*/gdk::Rectangle) -> bool;

    fn get_role(&self) -> Option<GString>;

    //#[cfg(any(feature = "v2_2", feature = "dox"))]
    //fn get_screen(&self) -> /*Ignored*/Option<gdk::Screen>;

    fn get_size(&self) -> (i32, i32);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_skip_pager_hint(&self) -> bool;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_skip_taskbar_hint(&self) -> bool;

    fn get_title(&self) -> Option<GString>;

    //#[cfg(any(feature = "v3_16", feature = "dox"))]
    //fn get_titlebar(&self) -> /*Ignored*/Option<gtk::Widget>;

    fn get_transient_for(&self) -> Option<gtk::Window>;

    //fn get_type_hint(&self) -> /*Ignored*/gdk::WindowTypeHint;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_urgency_hint(&self) -> bool;

    //#[cfg(any(feature = "v2_20", feature = "dox"))]
    //fn get_window_type(&self) -> /*Ignored*/gtk::WindowType;

    fn has_group(&self) -> bool;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn has_toplevel_focus(&self) -> bool;

    fn iconify(&self);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn is_active(&self) -> bool;

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn is_maximized(&self) -> bool;

    fn maximize(&self);

    //fn mnemonic_activate(&self, keyval: u32, modifier: /*Ignored*/gdk::ModifierType) -> bool;

    fn move_(&self, x: i32, y: i32);

    #[cfg_attr(feature = "v3_20", deprecated)]
    fn parse_geometry(&self, geometry: &str) -> bool;

    fn present(&self);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn present_with_time(&self, timestamp: u32);

    //#[cfg(any(feature = "v2_4", feature = "dox"))]
    //fn propagate_key_event(&self, event: /*Ignored*/&mut gdk::EventKey) -> bool;

    //fn remove_accel_group(&self, accel_group: /*Ignored*/&gtk::AccelGroup);

    //fn remove_mnemonic(&self, keyval: u32, target: /*Ignored*/&gtk::Widget);

    #[cfg_attr(feature = "v3_10", deprecated)]
    fn reshow_with_initial_size(&self);

    fn resize(&self, width: i32, height: i32);

    #[cfg_attr(feature = "v3_14", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn resize_grip_is_visible(&self) -> bool;

    #[cfg_attr(feature = "v3_20", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn resize_to_geometry(&self, width: i32, height: i32);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_accept_focus(&self, setting: bool);

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn set_application(&self, application: /*Ignored*/Option<&gtk::Application>);

    //#[cfg(any(feature = "v3_4", feature = "dox"))]
    //fn set_attached_to(&self, attach_widget: /*Ignored*/Option<&gtk::Widget>);

    fn set_decorated(&self, setting: bool);

    //fn set_default(&self, default_widget: /*Ignored*/Option<&gtk::Widget>);

    #[cfg_attr(feature = "v3_20", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_default_geometry(&self, width: i32, height: i32);

    fn set_default_size(&self, width: i32, height: i32);

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn set_deletable(&self, setting: bool);

    fn set_destroy_with_parent(&self, setting: bool);

    //fn set_focus(&self, focus: /*Ignored*/Option<&gtk::Widget>);

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn set_focus_on_map(&self, setting: bool);

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_focus_visible(&self, setting: bool);

    //fn set_geometry_hints(&self, geometry_widget: /*Ignored*/Option<&gtk::Widget>, geometry: /*Ignored*/Option<&mut gdk::Geometry>, geom_mask: /*Ignored*/gdk::WindowHints);

    //fn set_gravity(&self, gravity: /*Ignored*/gdk::Gravity);

    #[cfg_attr(feature = "v3_14", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_has_resize_grip(&self, value: bool);

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_has_user_ref_count(&self, setting: bool);

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn set_hide_titlebar_when_maximized(&self, setting: bool);

    //fn set_icon(&self, icon: /*Ignored*/Option<&gdk_pixbuf::Pixbuf>);

    //#[cfg(any(feature = "v2_2", feature = "dox"))]
    //fn set_icon_from_file<P: AsRef<std::path::Path>>(&self, filename: P, error: /*Ignored*/Option<glib::Error>) -> bool;

    //fn set_icon_list(&self, list: /*Ignored*/&[gdk_pixbuf::Pixbuf]);

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn set_icon_name(&self, name: Option<&str>);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_keep_above(&self, setting: bool);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_keep_below(&self, setting: bool);

    //fn set_mnemonic_modifier(&self, modifier: /*Ignored*/gdk::ModifierType);

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn set_mnemonics_visible(&self, setting: bool);

    fn set_modal(&self, modal: bool);

    #[cfg_attr(feature = "v3_8", deprecated)]
    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn set_opacity(&self, opacity: f64);

    //fn set_position(&self, position: /*Ignored*/gtk::WindowPosition);

    fn set_resizable(&self, resizable: bool);

    fn set_role(&self, role: &str);

    //#[cfg(any(feature = "v2_2", feature = "dox"))]
    //fn set_screen(&self, screen: /*Ignored*/&gdk::Screen);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_skip_pager_hint(&self, setting: bool);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_skip_taskbar_hint(&self, setting: bool);

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn set_startup_id(&self, startup_id: &str);

    fn set_title(&self, title: &str);

    //#[cfg(any(feature = "v3_10", feature = "dox"))]
    //fn set_titlebar(&self, titlebar: /*Ignored*/Option<&gtk::Widget>);

    fn set_transient_for<P: IsA<gtk::Window>>(&self, parent: Option<&P>);

    //fn set_type_hint(&self, hint: /*Ignored*/gdk::WindowTypeHint);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_urgency_hint(&self, setting: bool);

    #[cfg_attr(feature = "v3_22", deprecated)]
    fn set_wmclass(&self, wmclass_name: &str, wmclass_class: &str);

    fn stick(&self);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn unfullscreen(&self);

    fn unmaximize(&self);

    fn unstick(&self);

    fn get_property_default_height(&self) -> i32;

    fn set_property_default_height(&self, default_height: i32);

    fn get_property_default_width(&self) -> i32;

    fn set_property_default_width(&self, default_width: i32);

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn get_property_focus_visible(&self) -> bool;

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn set_property_focus_visible(&self, focus_visible: bool);

    fn get_property_has_toplevel_focus(&self) -> bool;

    fn get_property_is_active(&self) -> bool;

    fn get_property_is_maximized(&self) -> bool;

    #[cfg_attr(feature = "v3_14", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_property_resize_grip_visible(&self) -> bool;

    //fn get_property_screen(&self) -> /*Ignored*/Option<gdk::Screen>;

    //fn set_property_screen(&self, screen: /*Ignored*/Option<&gdk::Screen>);

    fn get_property_skip_pager_hint(&self) -> bool;

    fn set_property_skip_pager_hint(&self, skip_pager_hint: bool);

    fn get_property_skip_taskbar_hint(&self) -> bool;

    fn set_property_skip_taskbar_hint(&self, skip_taskbar_hint: bool);

    //fn get_property_type(&self) -> /*Ignored*/gtk::WindowType;

    fn get_property_urgency_hint(&self) -> bool;

    fn set_property_urgency_hint(&self, urgency_hint: bool);

    //fn get_property_window_position(&self) -> /*Ignored*/gtk::WindowPosition;

    //fn set_property_window_position(&self, window_position: /*Ignored*/gtk::WindowPosition);

    fn connect_activate_default<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_activate_default(&self);

    fn connect_activate_focus<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_activate_focus(&self);

    fn connect_enable_debugging<F: Fn(&Self, bool) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_enable_debugging(&self, toggle: bool) -> bool;

    fn connect_keys_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    //fn connect_set_focus<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_accept_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_application_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn connect_property_attached_to_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_decorated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_property_deletable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_destroy_with_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_focus_on_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_property_focus_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_gravity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v3_14", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_has_resize_grip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_has_toplevel_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn connect_property_hide_titlebar_when_maximized_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_active_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_maximized_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_property_mnemonics_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_modal_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_resizable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v3_14", deprecated)]
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_resize_grip_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_role_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_screen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_skip_pager_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_skip_taskbar_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn connect_property_startup_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_property_transient_for_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_type_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_urgency_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_window_position_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Window>> WindowExt for O {
    fn activate_default(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_activate_default(self.as_ref().to_glib_none().0))
        }
    }

    fn activate_focus(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_activate_focus(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v2_4", feature = "dox"))]
    //fn activate_key(&self, event: /*Ignored*/&mut gdk::EventKey) -> bool {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_activate_key() }
    //}

    //fn add_accel_group(&self, accel_group: /*Ignored*/&gtk::AccelGroup) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_add_accel_group() }
    //}

    //fn add_mnemonic(&self, keyval: u32, target: /*Ignored*/&gtk::Widget) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_add_mnemonic() }
    //}

    fn begin_move_drag(&self, button: i32, root_x: i32, root_y: i32, timestamp: u32) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_begin_move_drag(self.as_ref().to_glib_none().0, button, root_x, root_y, timestamp);
        }
    }

    //fn begin_resize_drag(&self, edge: /*Ignored*/gdk::WindowEdge, button: i32, root_x: i32, root_y: i32, timestamp: u32) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_begin_resize_drag() }
    //}

    #[cfg(any(feature = "v3_10", feature = "dox"))]
    fn close(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_close(self.as_ref().to_glib_none().0);
        }
    }

    fn deiconify(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_deiconify(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn fullscreen(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_fullscreen(self.as_ref().to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v3_18", feature = "dox"))]
    //fn fullscreen_on_monitor(&self, screen: /*Ignored*/&gdk::Screen, monitor: i32) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_fullscreen_on_monitor() }
    //}

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn get_accept_focus(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_accept_focus(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_application(&self) -> /*Ignored*/Option<gtk::Application> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_application() }
    //}

    //#[cfg(any(feature = "v3_4", feature = "dox"))]
    //fn get_attached_to(&self) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_attached_to() }
    //}

    fn get_decorated(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_decorated(self.as_ref().to_glib_none().0))
        }
    }

    fn get_default_size(&self) -> (i32, i32) {
        unsafe {
            let mut width = mem::MaybeUninit::uninit();
            let mut height = mem::MaybeUninit::uninit();
            gtk_layer_shell_sys::gtk_window_get_default_size(self.as_ref().to_glib_none().0, width.as_mut_ptr(), height.as_mut_ptr());
            let width = width.assume_init();
            let height = height.assume_init();
            (width, height)
        }
    }

    //#[cfg(any(feature = "v2_14", feature = "dox"))]
    //fn get_default_widget(&self) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_default_widget() }
    //}

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_deletable(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_deletable(self.as_ref().to_glib_none().0))
        }
    }

    fn get_destroy_with_parent(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_destroy_with_parent(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_focus(&self) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_focus() }
    //}

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_focus_on_map(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_focus_on_map(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_focus_visible(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_focus_visible(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_gravity(&self) -> /*Ignored*/gdk::Gravity {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_gravity() }
    //}

    //#[cfg(any(feature = "v2_10", feature = "dox"))]
    //fn get_group(&self) -> /*Ignored*/Option<gtk::WindowGroup> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_group() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_has_resize_grip(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_has_resize_grip(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn get_hide_titlebar_when_maximized(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_hide_titlebar_when_maximized(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_icon(&self) -> /*Ignored*/Option<gdk_pixbuf::Pixbuf> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_icon() }
    //}

    //fn get_icon_list(&self) -> /*Ignored*/Vec<gdk_pixbuf::Pixbuf> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_icon_list() }
    //}

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_icon_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_layer_shell_sys::gtk_window_get_icon_name(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_mnemonic_modifier(&self) -> /*Ignored*/gdk::ModifierType {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_mnemonic_modifier() }
    //}

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn get_mnemonics_visible(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_mnemonics_visible(self.as_ref().to_glib_none().0))
        }
    }

    fn get_modal(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_modal(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_opacity(&self) -> f64 {
        unsafe {
            gtk_layer_shell_sys::gtk_window_get_opacity(self.as_ref().to_glib_none().0)
        }
    }

    fn get_position(&self) -> (i32, i32) {
        unsafe {
            let mut root_x = mem::MaybeUninit::uninit();
            let mut root_y = mem::MaybeUninit::uninit();
            gtk_layer_shell_sys::gtk_window_get_position(self.as_ref().to_glib_none().0, root_x.as_mut_ptr(), root_y.as_mut_ptr());
            let root_x = root_x.assume_init();
            let root_y = root_y.assume_init();
            (root_x, root_y)
        }
    }

    fn get_resizable(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_resizable(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn get_resize_grip_area(&self, rect: /*Ignored*/gdk::Rectangle) -> bool {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_resize_grip_area() }
    //}

    fn get_role(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_layer_shell_sys::gtk_window_get_role(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v2_2", feature = "dox"))]
    //fn get_screen(&self) -> /*Ignored*/Option<gdk::Screen> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_screen() }
    //}

    fn get_size(&self) -> (i32, i32) {
        unsafe {
            let mut width = mem::MaybeUninit::uninit();
            let mut height = mem::MaybeUninit::uninit();
            gtk_layer_shell_sys::gtk_window_get_size(self.as_ref().to_glib_none().0, width.as_mut_ptr(), height.as_mut_ptr());
            let width = width.assume_init();
            let height = height.assume_init();
            (width, height)
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_skip_pager_hint(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_skip_pager_hint(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_skip_taskbar_hint(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_skip_taskbar_hint(self.as_ref().to_glib_none().0))
        }
    }

    fn get_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gtk_layer_shell_sys::gtk_window_get_title(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v3_16", feature = "dox"))]
    //fn get_titlebar(&self) -> /*Ignored*/Option<gtk::Widget> {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_titlebar() }
    //}

    fn get_transient_for(&self) -> Option<gtk::Window> {
        unsafe {
            from_glib_none(gtk_layer_shell_sys::gtk_window_get_transient_for(self.as_ref().to_glib_none().0))
        }
    }

    //fn get_type_hint(&self) -> /*Ignored*/gdk::WindowTypeHint {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_type_hint() }
    //}

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_urgency_hint(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_get_urgency_hint(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v2_20", feature = "dox"))]
    //fn get_window_type(&self) -> /*Ignored*/gtk::WindowType {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_get_window_type() }
    //}

    fn has_group(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_has_group(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn has_toplevel_focus(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_has_toplevel_focus(self.as_ref().to_glib_none().0))
        }
    }

    fn iconify(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_iconify(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn is_active(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_is_active(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    fn is_maximized(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_is_maximized(self.as_ref().to_glib_none().0))
        }
    }

    fn maximize(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_maximize(self.as_ref().to_glib_none().0);
        }
    }

    //fn mnemonic_activate(&self, keyval: u32, modifier: /*Ignored*/gdk::ModifierType) -> bool {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_mnemonic_activate() }
    //}

    fn move_(&self, x: i32, y: i32) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_move(self.as_ref().to_glib_none().0, x, y);
        }
    }

    fn parse_geometry(&self, geometry: &str) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_parse_geometry(self.as_ref().to_glib_none().0, geometry.to_glib_none().0))
        }
    }

    fn present(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_present(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn present_with_time(&self, timestamp: u32) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_present_with_time(self.as_ref().to_glib_none().0, timestamp);
        }
    }

    //#[cfg(any(feature = "v2_4", feature = "dox"))]
    //fn propagate_key_event(&self, event: /*Ignored*/&mut gdk::EventKey) -> bool {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_propagate_key_event() }
    //}

    //fn remove_accel_group(&self, accel_group: /*Ignored*/&gtk::AccelGroup) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_remove_accel_group() }
    //}

    //fn remove_mnemonic(&self, keyval: u32, target: /*Ignored*/&gtk::Widget) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_remove_mnemonic() }
    //}

    fn reshow_with_initial_size(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_reshow_with_initial_size(self.as_ref().to_glib_none().0);
        }
    }

    fn resize(&self, width: i32, height: i32) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_resize(self.as_ref().to_glib_none().0, width, height);
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn resize_grip_is_visible(&self) -> bool {
        unsafe {
            from_glib(gtk_layer_shell_sys::gtk_window_resize_grip_is_visible(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn resize_to_geometry(&self, width: i32, height: i32) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_resize_to_geometry(self.as_ref().to_glib_none().0, width, height);
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_accept_focus(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_accept_focus(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    //#[cfg(any(feature = "v3_0", feature = "dox"))]
    //fn set_application(&self, application: /*Ignored*/Option<&gtk::Application>) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_application() }
    //}

    //#[cfg(any(feature = "v3_4", feature = "dox"))]
    //fn set_attached_to(&self, attach_widget: /*Ignored*/Option<&gtk::Widget>) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_attached_to() }
    //}

    fn set_decorated(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_decorated(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    //fn set_default(&self, default_widget: /*Ignored*/Option<&gtk::Widget>) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_default() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_default_geometry(&self, width: i32, height: i32) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_default_geometry(self.as_ref().to_glib_none().0, width, height);
        }
    }

    fn set_default_size(&self, width: i32, height: i32) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_default_size(self.as_ref().to_glib_none().0, width, height);
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn set_deletable(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_deletable(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    fn set_destroy_with_parent(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_destroy_with_parent(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    //fn set_focus(&self, focus: /*Ignored*/Option<&gtk::Widget>) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_focus() }
    //}

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn set_focus_on_map(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_focus_on_map(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_focus_visible(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_focus_visible(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    //fn set_geometry_hints(&self, geometry_widget: /*Ignored*/Option<&gtk::Widget>, geometry: /*Ignored*/Option<&mut gdk::Geometry>, geom_mask: /*Ignored*/gdk::WindowHints) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_geometry_hints() }
    //}

    //fn set_gravity(&self, gravity: /*Ignored*/gdk::Gravity) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_gravity() }
    //}

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_has_resize_grip(&self, value: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_has_resize_grip(self.as_ref().to_glib_none().0, value.to_glib());
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn set_has_user_ref_count(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_has_user_ref_count(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn set_hide_titlebar_when_maximized(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_hide_titlebar_when_maximized(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    //fn set_icon(&self, icon: /*Ignored*/Option<&gdk_pixbuf::Pixbuf>) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_icon() }
    //}

    //#[cfg(any(feature = "v2_2", feature = "dox"))]
    //fn set_icon_from_file<P: AsRef<std::path::Path>>(&self, filename: P, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_icon_from_file() }
    //}

    //fn set_icon_list(&self, list: /*Ignored*/&[gdk_pixbuf::Pixbuf]) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_icon_list() }
    //}

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn set_icon_name(&self, name: Option<&str>) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_icon_name(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_keep_above(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_keep_above(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_keep_below(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_keep_below(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    //fn set_mnemonic_modifier(&self, modifier: /*Ignored*/gdk::ModifierType) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_mnemonic_modifier() }
    //}

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn set_mnemonics_visible(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_mnemonics_visible(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    fn set_modal(&self, modal: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_modal(self.as_ref().to_glib_none().0, modal.to_glib());
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn set_opacity(&self, opacity: f64) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_opacity(self.as_ref().to_glib_none().0, opacity);
        }
    }

    //fn set_position(&self, position: /*Ignored*/gtk::WindowPosition) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_position() }
    //}

    fn set_resizable(&self, resizable: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_resizable(self.as_ref().to_glib_none().0, resizable.to_glib());
        }
    }

    fn set_role(&self, role: &str) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_role(self.as_ref().to_glib_none().0, role.to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v2_2", feature = "dox"))]
    //fn set_screen(&self, screen: /*Ignored*/&gdk::Screen) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_screen() }
    //}

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_skip_pager_hint(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_skip_pager_hint(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_skip_taskbar_hint(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_skip_taskbar_hint(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn set_startup_id(&self, startup_id: &str) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_startup_id(self.as_ref().to_glib_none().0, startup_id.to_glib_none().0);
        }
    }

    fn set_title(&self, title: &str) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_title(self.as_ref().to_glib_none().0, title.to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v3_10", feature = "dox"))]
    //fn set_titlebar(&self, titlebar: /*Ignored*/Option<&gtk::Widget>) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_titlebar() }
    //}

    fn set_transient_for<P: IsA<gtk::Window>>(&self, parent: Option<&P>) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_transient_for(self.as_ref().to_glib_none().0, parent.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    //fn set_type_hint(&self, hint: /*Ignored*/gdk::WindowTypeHint) {
    //    unsafe { TODO: call gtk_layer_shell_sys:gtk_window_set_type_hint() }
    //}

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_urgency_hint(&self, setting: bool) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_urgency_hint(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    fn set_wmclass(&self, wmclass_name: &str, wmclass_class: &str) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_set_wmclass(self.as_ref().to_glib_none().0, wmclass_name.to_glib_none().0, wmclass_class.to_glib_none().0);
        }
    }

    fn stick(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_stick(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn unfullscreen(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_unfullscreen(self.as_ref().to_glib_none().0);
        }
    }

    fn unmaximize(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_unmaximize(self.as_ref().to_glib_none().0);
        }
    }

    fn unstick(&self) {
        unsafe {
            gtk_layer_shell_sys::gtk_window_unstick(self.as_ref().to_glib_none().0);
        }
    }

    fn get_property_default_height(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"default-height\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `default-height` getter").unwrap()
        }
    }

    fn set_property_default_height(&self, default_height: i32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"default-height\0".as_ptr() as *const _, Value::from(&default_height).to_glib_none().0);
        }
    }

    fn get_property_default_width(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"default-width\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `default-width` getter").unwrap()
        }
    }

    fn set_property_default_width(&self, default_width: i32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"default-width\0".as_ptr() as *const _, Value::from(&default_width).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn get_property_focus_visible(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"focus-visible\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `focus-visible` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn set_property_focus_visible(&self, focus_visible: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"focus-visible\0".as_ptr() as *const _, Value::from(&focus_visible).to_glib_none().0);
        }
    }

    fn get_property_has_toplevel_focus(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"has-toplevel-focus\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `has-toplevel-focus` getter").unwrap()
        }
    }

    fn get_property_is_active(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-active\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-active` getter").unwrap()
        }
    }

    fn get_property_is_maximized(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-maximized\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-maximized` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn get_property_resize_grip_visible(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"resize-grip-visible\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `resize-grip-visible` getter").unwrap()
        }
    }

    //fn get_property_screen(&self) -> /*Ignored*/Option<gdk::Screen> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"screen\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `screen` getter")
    //    }
    //}

    //fn set_property_screen(&self, screen: /*Ignored*/Option<&gdk::Screen>) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"screen\0".as_ptr() as *const _, Value::from(screen).to_glib_none().0);
    //    }
    //}

    fn get_property_skip_pager_hint(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"skip-pager-hint\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `skip-pager-hint` getter").unwrap()
        }
    }

    fn set_property_skip_pager_hint(&self, skip_pager_hint: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"skip-pager-hint\0".as_ptr() as *const _, Value::from(&skip_pager_hint).to_glib_none().0);
        }
    }

    fn get_property_skip_taskbar_hint(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"skip-taskbar-hint\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `skip-taskbar-hint` getter").unwrap()
        }
    }

    fn set_property_skip_taskbar_hint(&self, skip_taskbar_hint: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"skip-taskbar-hint\0".as_ptr() as *const _, Value::from(&skip_taskbar_hint).to_glib_none().0);
        }
    }

    //fn get_property_type(&self) -> /*Ignored*/gtk::WindowType {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"type\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `type` getter").unwrap()
    //    }
    //}

    fn get_property_urgency_hint(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"urgency-hint\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `urgency-hint` getter").unwrap()
        }
    }

    fn set_property_urgency_hint(&self, urgency_hint: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"urgency-hint\0".as_ptr() as *const _, Value::from(&urgency_hint).to_glib_none().0);
        }
    }

    //fn get_property_window_position(&self) -> /*Ignored*/gtk::WindowPosition {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"window-position\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `window-position` getter").unwrap()
    //    }
    //}

    //fn set_property_window_position(&self, window_position: /*Ignored*/gtk::WindowPosition) {
    //    unsafe {
    //        gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"window-position\0".as_ptr() as *const _, Value::from(&window_position).to_glib_none().0);
    //    }
    //}

    fn connect_activate_default<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_default_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"activate-default\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(activate_default_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn emit_activate_default(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject).emit("activate-default", &[]).unwrap() };
    }

    fn connect_activate_focus<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activate_focus_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"activate-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(activate_focus_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn emit_activate_focus(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject).emit("activate-focus", &[]).unwrap() };
    }

    fn connect_enable_debugging<F: Fn(&Self, bool) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn enable_debugging_trampoline<P, F: Fn(&P, bool) -> bool + 'static>(this: *mut gtk_sys::GtkWindow, toggle: glib_sys::gboolean, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref(), from_glib(toggle)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"enable-debugging\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(enable_debugging_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn emit_enable_debugging(&self, toggle: bool) -> bool {
        let res = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut gobject_sys::GObject).emit("enable-debugging", &[&toggle]).unwrap() };
        res.unwrap().get().expect("Return Value for `emit_enable_debugging`").unwrap()
    }

    fn connect_keys_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn keys_changed_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"keys-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(keys_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    //fn connect_set_focus<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored object: Gtk.Widget
    //}

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_accept_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_accept_focus_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::accept-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_accept_focus_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_application_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_application_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::application\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_application_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn connect_property_attached_to_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_attached_to_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::attached-to\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_attached_to_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_decorated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_decorated_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::decorated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_decorated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_default_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_height_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-height\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_default_height_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_default_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_width_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_default_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_property_deletable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_deletable_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::deletable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_deletable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_destroy_with_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_destroy_with_parent_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::destroy-with-parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_destroy_with_parent_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_focus_on_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focus_on_map_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focus-on-map\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_focus_on_map_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_property_focus_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_focus_visible_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::focus-visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_focus_visible_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_gravity_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gravity_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::gravity\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_gravity_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_has_resize_grip_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_resize_grip_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::has-resize-grip\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_has_resize_grip_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_has_toplevel_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_toplevel_focus_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::has-toplevel-focus\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_has_toplevel_focus_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_4", feature = "dox"))]
    fn connect_property_hide_titlebar_when_maximized_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hide_titlebar_when_maximized_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hide-titlebar-when-maximized\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_hide_titlebar_when_maximized_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_icon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_icon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_icon_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_icon_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::icon-name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_icon_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_is_active_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_active_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-active\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_is_active_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_is_maximized_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_maximized_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-maximized\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_is_maximized_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_property_mnemonics_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mnemonics_visible_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mnemonics-visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_mnemonics_visible_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_modal_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_modal_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::modal\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_modal_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_resizable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_resizable_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::resizable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_resizable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    fn connect_property_resize_grip_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_resize_grip_visible_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::resize-grip-visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_resize_grip_visible_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_role_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_role_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::role\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_role_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_screen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_screen_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::screen\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_screen_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_skip_pager_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_skip_pager_hint_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::skip-pager-hint\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_skip_pager_hint_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_skip_taskbar_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_skip_taskbar_hint_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::skip-taskbar-hint\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_skip_taskbar_hint_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn connect_property_startup_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_startup_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::startup-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_startup_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_property_transient_for_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_transient_for_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::transient-for\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_transient_for_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_type_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_hint_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type-hint\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_type_hint_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_urgency_hint_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_urgency_hint_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::urgency-hint\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_urgency_hint_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_window_position_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_window_position_trampoline<P, F: Fn(&P) + 'static>(this: *mut gtk_sys::GtkWindow, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Window>
        {
            let f: &F = &*(f as *const F);
            f(&gtk::Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::window-position\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_window_position_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Window {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Window")
    }
}
